import{_ as e,c as a,a0 as l,o as t}from"./chunks/framework.CmXSGuKu.js";const p=JSON.parse('{"title":"Requisiti","description":"","frontmatter":{},"headers":[],"relativePath":"report/2-requirements.md","filePath":"report/2-requirements.md"}'),o={name:"report/2-requirements.md"};function r(n,i,s,u,d,c){return t(),a("div",null,i[0]||(i[0]=[l('<h1 id="requisiti" tabindex="-1">Requisiti <a class="header-anchor" href="#requisiti" aria-label="Permalink to &quot;Requisiti&quot;">​</a></h1><h2 id="business" tabindex="-1">Business <a class="header-anchor" href="#business" aria-label="Permalink to &quot;Business&quot;">​</a></h2><p>Si vuole sviluppare un simulatore di reti ferroviarie, progettato per offrire un ambiente dedicato a test e analisi. Le principali finalità includono:</p><ul><li>Stima del comportamento del sistema: analizzare e prevedere le prestazioni del sistema ferroviario in relazione a diverse configurazioni operative.</li><li>Test di prototipi: consentire la verifica sperimentale di nuove configurazioni e soluzioni progettuali prima della loro implementazione reale.</li><li>Ottimizzazione delle prestazioni: fornire dei KPI per valutare l&#39;efficienza della rete, ad esempio riportando i ritardi accumulati.</li><li>Valutazione di scenari critici: studiare gli effetti di eventi come interventi di manutenzione programmata o guasti imprevisti.</li></ul><h2 id="modello-di-dominio" tabindex="-1">Modello di dominio <a class="header-anchor" href="#modello-di-dominio" aria-label="Permalink to &quot;Modello di dominio&quot;">​</a></h2><ul><li>Stazione <ul><li>binari</li></ul></li><li>treno <ul><li>normali, ad alta velocità</li><li>velocità max nominale</li><li>num carrozze =&gt; capacità (se c&#39;è un tipo associato alle carrozze)</li></ul></li><li>carrozze <ul><li>lunghezza</li><li>tipo? (passeggeri/merce)</li></ul></li><li>binario (dove aspettano i passeggeri il treno a.k.a. rotaia della stazione)</li><li>rotaie (normali, ad alta velocità) <ul><li>velocità max supportata</li><li>lunghezza</li></ul></li><li>punti di scambio (in = out) <ul><li>rotaie in/out</li><li>(valutare se tenere path normale&lt;-&gt;alta velocità o volere scambi con binari uniformi)</li></ul></li><li>incroci (come punti di scambio ma si incrociano)</li><li>bivii (come punti di scambio ma in &lt; o &gt; out)</li><li>deposito (binario morto)</li><li>Percorso (sequenza di stazioni/tratte) <ul><li>orario di partenza</li><li>lista di tratte</li></ul></li><li>tratta <ul><li>orario partenza programmato/effettivo</li><li>orario arrivo programmato/effettivo</li><li>ritardo</li><li>tipo di passaggio nella stazione di arrivo?</li></ul></li></ul><h3 id="glossario" tabindex="-1">Glossario <a class="header-anchor" href="#glossario" aria-label="Permalink to &quot;Glossario&quot;">​</a></h3><ul><li>Stazione: punto di partenza e arrivo di un treno</li><li>Treno: veicolo su rotaia che trasporta persone o merci</li><li>Binario: rotaia all&#39;interno della stazione</li><li>Rotaia: struttura su cui si muove il treno</li><li>Incorcio: punto in cui due o più rotaie s&#39;incrociano (può esserci un punto di scambio)</li><li>Deviatoio/scambio: è un componente meccanico che permette di spostare un treno da una rotaia a un altra.</li><li>Punto di scambio: è un&#39;area più ampia della rete ferroviaria che comprende uno o più deviatoi.</li><li>Bivio*: punto di scambio con due o più rotaie in uscita (e viceversa)</li><li>Deposito: binario morto o capolinea</li><li>Linea: l&#39;infrastruttura fisica costituita da binari, stazioni, segnali e altre strutture che collega due o più località.</li><li>Percorso: itinerario seguito dal treno su una o piu linee ferroviarie</li><li>Tratta: collegamento tra due stazioni</li></ul><h2 id="funzionali" tabindex="-1">Funzionali <a class="header-anchor" href="#funzionali" aria-label="Permalink to &quot;Funzionali&quot;">​</a></h2><h3 id="utente" tabindex="-1">Utente <a class="header-anchor" href="#utente" aria-label="Permalink to &quot;Utente&quot;">​</a></h3><ul><li>L&#39;utente deve poter interagire con l&#39;applicazione tramite un&#39;interfaccia</li><li>L&#39;utente deve poter creare una nuova rete ferroviaria potendo specificare e combinare liberamente le varie stazioni e tratte, definendo i treni e lo scheduling(tratte valide + orario di partenza) <ul><li>tramite file (scritto in dsl? o/+ gui)</li><li>tramite UI (drag and drop?)</li></ul></li><li>L&#39;utente deve poter vedere l&#39;esecuzione della simulazione una volta avviata</li><li>L&#39;utente deve poter vedere lo scheduling live di un treno (orari programmati/ effettivi e stazioni fatte e da fare)</li><li>L&#39;utente deve poter vedere le tabelloni partenze/arrivi in una stazione</li><li>L&#39;utente deve poter interrompere (pausa) (rewind e modifica live della configurazione?) la simulazione</li><li>L&#39;utente deve poter vedere le statistiche finali e durante la simulazione</li><li>L&#39;utente deve poter visualizzare gli errori/avvsisi della simulazioni/interagioni con la gui</li></ul><h3 id="sistema" tabindex="-1">Sistema <a class="header-anchor" href="#sistema" aria-label="Permalink to &quot;Sistema&quot;">​</a></h3><ul><li>Il sistema deve poter visualizzate la rete</li><li>Il sistema deve poter visualizzare le infomazioni delle entità della simulazione</li><li>Il sistema deve poter gestire la crezione di reti ferroviarie</li><li>Il sistema deve poter gestire l&#39;esecuzione della simulazione <ul><li>(start/stop vari)</li><li>evitando la sovrapposizione dei treni in una rotaia</li><li>gestendo la creazione di ritardi</li></ul></li><li>Il sistema deve poter gestire la creazione e aggiornamento dei vari scheduling a partire dalle tratte</li><li>Il sistema deve poter gestire la creazione e aggiornamento dei tabelloni di partenze e arrivi</li><li>Il sistema deve poter gestire il calcolo delle statistiche relative alla simulazione</li><li>Il sistema deve poter controllare la correttezza del setup della simulazione</li><li>Il sistema deve poter replicare una stessa simulazione (valutare random e seed)</li><li>Il sistema deve poter gestire errori e avvisi</li></ul><h2 id="non-funzionali" tabindex="-1">Non funzionali <a class="header-anchor" href="#non-funzionali" aria-label="Permalink to &quot;Non funzionali&quot;">​</a></h2><ul><li>Usabilità: l&#39;interfaccia grafica deve essere semplice e intuitiva.</li><li>Robustezza: l&#39;applicazione deve gestire setup errati</li><li>Affidabilià: l&#39;applicazione deve essere stabile, evitando crash.</li><li>Testabilità: devono essere presenti test per verificare il corretto funzionamento del sistema (testare i singoli elementi/ interazioni/ sistema)</li><li>Manutenibilità(?): il codice deve essere ben strutturato e facilmente manutenibile.</li><li>Comprensibilità: l&#39;intero progetto deve essere ben documentato, in modo da facilitare la comprensione del codice.</li><li>Estendibilità: il progetto deve favorire la personalizzazione e l&#39;aggiunta di funzionalità</li><li>Portabilità: l&#39;applicazione può essere eseguita su più sistemi operativi</li></ul><h2 id="implementazione" tabindex="-1">Implementazione <a class="header-anchor" href="#implementazione" aria-label="Permalink to &quot;Implementazione&quot;">​</a></h2><ul><li>Scala 3.3.4</li><li>ScalaTest 3.2.18</li><li>JDK 17+</li><li>Prolog v.v.v</li><li>ScalaSwing v.v.v</li><li>Cucumber 8.25.1</li><li>TDD (BDD vedendo quando abbiamo usato cucumber?)</li><li>DSL</li><li>SBT as automation tool 1.10.1</li><li>SBT assembly (FAT jar) 2.3.0</li><li>Scaladoc</li><li>Scalafmt 2.5.2</li><li>archUnit 1.2.0</li><li>wartremover 3.2.5</li><li>semantic release &amp; conventional commit/branch</li><li>Scoverage 2.2.2</li><li>Preferenza per stutture dati immutabili (Full immutabile?)</li><li>Mixin? Gli svilupattori intendono utilizzare i mixin per realizzare quello che normalmente viene implementato con il pattern Component, in quanto sembra essere un buon campo di applicazione di questo concetto. ???</li></ul><h2 id="opzionali" tabindex="-1">Opzionali <a class="header-anchor" href="#opzionali" aria-label="Permalink to &quot;Opzionali&quot;">​</a></h2><ul><li>scelta tipologia di alimentazione del treno <ul><li>più tipologie di carrozze (merci, specializzate, ecc...)</li><li>per aggiungere scenari treno e rotaie con corrente/magnetiche, e check autonomia (es se disel e tratta troppo lunga si deve fermare a fare benza)</li></ul></li><li>rotaie (a levitazione magnetica o automatizzati per estendebilità)</li><li>ottimizzazione/ricerca di tratta più veloce ( <ul><li>aka definire solo le fermate e non tutte le stazioni e ottimizzare i percorsi tra le fermate introducendo meccaniche di balancing del traffico</li></ul></li><li>strutture speciali (giro della morte, ponti, gallerie)</li><li>flag fermata lunga (oltre fermata breve e passaggio)</li><li>cambiare colore agli elementi della rete ferroviaria a seconda di quanto sono trafficati/far vedere dei box con delle statistiche sopra treni/stazioni</li><li>gestione personalizzata di come si intervallano i treni sulla stessa tratta in caso di sovrapposizioni(e.g. priorità varie/un binario non viene mai percorso due volte di fila nello stesso verso)</li><li>gestione di eventi esterni (pioggia, neve, sciopero, ecc...) eventi che influiscono porzoni di rete</li></ul>',19)]))}const v=e(o,[["render",r]]);export{p as __pageData,v as default};
